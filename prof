#!/usr/bin/env bash

################################################################################
# prof - CLI tool for managing bash profiles
#
# Purpose:
#   prof is a command-line tool designed to organize and manage bash profiles,
#   providing users with a convenient way to create, edit, delete, list, export,
#   and import profiles. It helps users organize their .bash_profile contents by
#   creating separate profiles with customizable settings, aliases, functions,
#   and more. The tool offers features such as dependency management by load
#   order prioritization for seamless profile loading.
#
# Author:
#   Ben Bynum
#
# Version:
#   1.1.5
#   09/28/2024
#
# Repository:
#   https://github.com/blbynum/prof
#
# License:
#   MIT License
#
#   Copyright (c) 2024 Ben Bynum
#
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#   of this software and associated documentation files (the "Software"), to deal
#   in the Software without restriction, including without limitation the rights
#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#   copies of the Software, and to permit persons to whom the Software is
#   furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#
################################################################################

VERSION="v1.1.5-SNAPSHOT"
GITHUB_REPO="blbynum/prof"

ALLOW_PRERELEASES=true
PROFILES_DIR=".profiles"
PROFILE_METADATA_FILE=".profile_metadata"

PROFILE_TEMPLATE=$(cat << EOF
#!/usr/bin/env bash

# Profile: {profile_name}
# Description: Brief description of the profile

# ===============================================
# Environment variables
# ===============================================

# ===============================================
# Path modifications
# ===============================================

# ===============================================
# Functions
# ===============================================

# ===============================================
# Aliases
# ===============================================

# ===============================================
# Prompt modifications
# ===============================================

# ===============================================
# Profile specific settings/commands
# ===============================================

# ===============================================
# Other
# ===============================================

# End of profile: {profile_name}

# Print a message indicating that the profile has been loaded
echo "Profile {profile_name} loaded."

EOF
)

get_script_path() {
    local source="${BASH_SOURCE[0]}"
    
    # Resolve $source until the file is no longer a symlink
    while [ -h "$source" ]; do
        local dir="$( cd -P "$( dirname "$source" )" && pwd )"
        source="$(readlink "$source")"
        # If $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
        [[ $source != /* ]] && source="$dir/$source"
    done
    
    local dir="$( cd -P "$( dirname "$source" )" && pwd )"
    echo "$dir/$(basename "$source")"
}

SCRIPT_PATH=$(get_script_path)
SCRIPT_NAME=$(basename "$SCRIPT_PATH")

die() {
    if [ -n "$1" ]; then
        echo "$1" >&2
    fi
    if [ -n "$2" ]; then
        echo "$2" >&2
    fi
    exit 1
}

create_profile() {
    if [ -z "$1" ]; then
        die "Error: No profile name provided." "Usage: prof create <profile_name> <load_order>"
    fi

    if [ -z "$2" ]; then
        die "Error: No load order provided." "Usage: prof create <profile_name> <load_order>"
    fi

    if ! [[ "$2" =~ ^[0-9]+$ ]]; then
        die "Error: Load order must be a positive integer."
    fi

    if ! [[ "$1" =~ ^[A-Za-z0-9_-]+$ ]]; then
        die "Error: Profile name can only contain letters, numbers, underscores, and hyphens."
    fi

    local profile_name=$1
    local load_order=$2

    # Ensure the ~/$PROFILES_DIR directory exists
    mkdir -p ~/$PROFILES_DIR

    # Ensure the profile metadata file exists
    touch ~/$PROFILES_DIR/$PROFILE_METADATA_FILE

    # Determine the user's preferred editor
    local editor=${EDITOR:-vi}  # Default to vi if no editor is set

    # Format the load order with leading zeros
    printf -v formatted_load_order "%02d" "$load_order"

    # Check if profile already exists
    if grep -qw "$profile_name" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE; then
        die "Profile $profile_name already exists."
    fi

    # Add the profile to the metadata file
    echo "$formatted_load_order $profile_name" >> ~/$PROFILES_DIR/$PROFILE_METADATA_FILE

    # Sort the metadata file by load order
    sort ~/$PROFILES_DIR/$PROFILE_METADATA_FILE -o ~/$PROFILES_DIR/$PROFILE_METADATA_FILE

    # Create the profile file with the template content
    echo "${PROFILE_TEMPLATE//\{profile_name\}/$profile_name}" > ~/$PROFILES_DIR/$profile_name

    # Open the new profile in the editor
    $editor ~/$PROFILES_DIR/$profile_name
}


edit_profile() {
    if [ -z "$1" ]; then
        die "Error: No profile name provided." "Usage: prof edit <profile_name> [new_load_order]"
    fi

    local profile_name=$1
    local new_load_order=$2

    # Check if the new load order is a positive integer if provided
    if [[ -n "$new_load_order" && ! "$new_load_order" =~ ^[0-9]+$ ]]; then
        die "Error: Load order must be a positive integer."
    fi

    # Determine the user's preferred editor
    local editor=${EDITOR:-vi}  # Default to vi if no editor is set

    # Check if the profile exists
    if grep -qw "$profile_name" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE; then
        # If a new load order is provided, update it
        if [ -n "$new_load_order" ]; then
            # Format the new load order with leading zeros
            printf -v formatted_load_order "%02d" "$new_load_order"

            # Identify the OS
            case "$(uname -s)" in
                Darwin*)    sed -i '' "s/^.*$profile_name$/$formatted_load_order $profile_name/" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE ;;
                Linux*)     sed -i "s/^.*$profile_name$/$formatted_load_order $profile_name/" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE ;;
                *)          die "Unsupported OS. Cannot determind editor. Edit profiles manually in the ~/$PROFILES_DIR directory." ;;
            esac

            # Sort the metadata file by load order
            sort ~/$PROFILES_DIR/$PROFILE_METADATA_FILE -o ~/$PROFILES_DIR/$PROFILE_METADATA_FILE
        fi

        # Open the profile in the editor
        $editor ~/$PROFILES_DIR/$profile_name
    else
        die "Error: Profile $profile_name does not exist."
    fi
}



delete_profile() {
    if [ -z "$1" ]; then
        die "Error: No profile name provided." "Usage: prof delete <profile_name>"
    fi

    local profile_name=$1

    # Check if the profile exists
    if grep -qw "$profile_name" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE; then
        # Prompt for confirmation
        read -p "Are you sure you want to delete the profile '$profile_name'? This action cannot be undone. (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            # Delete the profile file
            rm ~/$PROFILES_DIR/$profile_name
            # Remove the profile from the metadata file
            sed -i '' "/$profile_name/d" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE
            echo "Profile '$profile_name' deleted."
        else
            echo "Deletion canceled."
        fi
    else
        die "Error: Profile '$profile_name' does not exist."
    fi
}


list_profiles() {
    # Check if the metadata file exists
    if [ ! -f ~/$PROFILES_DIR/$PROFILE_METADATA_FILE ]; then
        echo "No profiles found."
        return 0
    fi

    echo "Profiles:"
    echo "---------"

    # Read the metadata file line by line
    while IFS= read -r line; do
        local load_order=$(echo "$line" | awk '{print $1}')
        local profile_name=$(echo "$line" | awk '{print $2}')
        echo "[$load_order] $profile_name"
    done < ~/$PROFILES_DIR/$PROFILE_METADATA_FILE
}

export_profile() {
    local profile_name=$1
    local export_directory=$2

    if [ -z "$profile_name" ]; then
        die "Error: No profile name provided." "Usage: prof export <profile_name> <export_directory>"
    fi

    if [ -z "$export_directory" ]; then
        die "Error: No export directory provided." "Usage: prof export <profile_name> <export_directory>"
    fi

    # Check if the profile exists
    if grep -qw "$profile_name" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE; then
        # Create the export directory if it doesn't exist
        mkdir -p "$export_directory"

        # Copy the profile file to the export directory
        cp ~/$PROFILES_DIR/$profile_name "$export_directory/$profile_name"

        echo "Profile '$profile_name' exported to $export_directory."
    else
        die "Error: Profile '$profile_name' does not exist."
    fi
}

import_profile() {
    local profile_file=$1
    local load_order=$2

    if [ -z "$profile_file" ]; then
        die "Error: No profile file provided." "Usage: prof import <profile_file> <load_order>"
    fi

    if [ -z "$load_order" ]; then
        die "Error: No load order provided." "Usage: prof import <profile_file> <load_order>"
    fi

    if ! [[ "$load_order" =~ ^[0-9]+$ ]]; then
        die "Error: Load order must be a positive integer."
    fi

    if [ ! -f "$profile_file" ]; then
        die "Error: Profile file '$profile_file' does not exist."
    fi

    local profile_name=$(basename "$profile_file")

    # Format the load order with leading zeros
    printf -v formatted_load_order "%02d" "$load_order"

    # Check if the profile already exists
    if grep -qw "$profile_name" ~/$PROFILES_DIR/$PROFILE_METADATA_FILE; then
        echo "Profile '$profile_name' already exists. Skipping import."
    else
        # Copy the profile file to the ~/$PROFILES_DIR directory
        cp "$profile_file" ~/$PROFILES_DIR/
        # Add the profile to the metadata file with the provided load order
        echo "$formatted_load_order $profile_name" >> ~/$PROFILES_DIR/$PROFILE_METADATA_FILE
        echo "Profile '$profile_name' imported with load order $formatted_load_order."
    fi
}


install_prof() {
    local target_file=${1:-~/.bash_profile}

    # Check if the target file exists
    if [ ! -f "$target_file" ]; then
        die "Error: Target file '$target_file' does not exist." "You can specify a different file by providing an argument, e.g., prof install .zshrc"
    fi

    # Check if the code already exists in the target file
    if grep -q "# Load all profiles in the ~/$PROFILES_DIR directory" "$target_file"; then
        echo "The code to load profiles is already present in '$target_file'."
    else
        # Add the code to load profiles to the target file
        cat << EOF >> "$target_file"

# Load all profiles in the ~/$PROFILES_DIR directory
for profile in ~/$PROFILES_DIR/*; do
    if [ -f "\$profile" ]; then
        source "\$profile"
    fi
done

EOF

        # Display instructions for adding prof to PATH
        cat << EOF

A loop has been added to $target_file to load all profiles in the ~/$PROFILES_DIR directory.

To use the 'prof' command, you have two options:

Option 1: Add the location of the 'prof' executable to your PATH manually.
You can do this by adding the following line to your target file (e.g., ~/.bash_profile):
export PATH=\$PATH:/path/to/prof
Make sure to replace '/path/to/prof' with the actual path where the 'prof' executable is located.

Option 2: Copy the 'prof' executable to a directory that is already in your PATH.
For example, you can copy 'prof' to /usr/local/bin, which is commonly in the default PATH on many systems.
To do this, run the following command:
cp prof /usr/local/bin
After copying, you can use 'prof' from any location.

EOF
    fi
}


check_for_update() {
    echo "Current version: $VERSION"
    echo "Checking for updates..."
    local release_info
    if [ "$ALLOW_PRERELEASES" = true ]; then
        release_info=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases")
    else
        release_info=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    fi
    
    if [ $? -ne 0 ]; then
        die "Failed to fetch release information." "Check your internet connection."
    fi

    local latest_version
    latest_version=$(echo "$release_info" | awk -F'"' '/"tag_name":/ {print $4; exit}')

    if [ -z "$latest_version" ]; then
        die "Failed to parse latest version." "The GitHub API response may have changed. Please report this issue."
    fi

    if [ "$(printf '%s\n' "$VERSION" "$latest_version" | sort -V | tail -n1)" != "$VERSION" ]; then
        echo "Update available: $latest_version"
        local updater_url
        updater_url=$(echo "$release_info" | awk -F'"' '/"browser_download_url":.*updater\.sh/ {print $4; exit}')
        
        if [ -z "$updater_url" ]; then
            die "Failed to find updater script URL." "The release may not have an attached updater script. Check the GitHub repository."
        fi

        echo "Do you want to update to version $latest_version? (y/n): "
        read -r answer
        if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then
            run_updater "$updater_url"
        else
            echo "Update cancelled."
        fi
    else
        echo "No updates available."
    fi
}

run_updater() {
    local updater_url="$1"
    local temp_file
    temp_file=$(mktemp)

    if ! curl -sL "$updater_url" -o "$temp_file"; then
        rm "$temp_file"
        die "Failed to download the updater script." "Check your internet connection."
    fi

    if [ ! -s "$temp_file" ]; then
        rm "$temp_file"
        die "Downloaded updater script is empty." "The download may have been interrupted. Please try again."
    fi

    chmod +x "$temp_file"
    "$temp_file" "$SCRIPT_PATH" "$VERSION" "$GITHUB_REPO" "$ALLOW_PRERELEASES"
    exit_code=$?

    [ -f "$temp_file" ] && rm "$temp_file"

    if [ $exit_code -ne 0 ]; then
        die "Updater script failed." "Check the error message above."
    fi

    echo "Prof has been updated!"
    exit 0
}

update() {
    if ! command -v curl &> /dev/null; then
        die "curl is required but not installed." "Install curl and try again."
    fi

    check_for_update
}

display_help() {
    cat <<EOF
prof - CLI tool for managing bash profiles

Usage: prof <command> [arguments]

Commands:
  create <profile_name> <load_order>        Create a new profile
  edit <profile_name> [new_load_order]      Edit an existing profile (optional: update load order)
  delete <profile_name>                     Delete an existing profile
  list                                      List all profiles
  export <profile_name> <export_directory>  Export a profile to an export directory
  import <profile_file> <load_order>        Import a profile with a specific load order
  install [<target_file>]                   Install the profile loader line in the target file (default: ~/.bash_profile)
  update                                    Check for updates to prof. User will be prompted for consent before installing update. 

  help                                      Display this help message

Note: The 'install' command installs the line to load profiles in the target file,
      such as ~/.bash_profile. You can specify a different file by providing
      an optional argument, e.g., prof install .zshrc.
EOF
}


main() {
    case "$1" in
        create)
            create_profile "$2" "$3"
            ;;
        edit)
            edit_profile "$2" "$3"
            ;;
        delete)
            delete_profile "$2"
            ;;
        list)
            list_profiles
            ;;
        export)
            export_profile "$2" "$3"
            ;;
        import)
            import_profile "$2" "$3"
            ;;
        install)
            install_prof "$2"
            ;;
        update)
            update
            ;;
        help)
            display_help
            ;;
        *)
            echo "Invalid command: $1"
            display_help
            die
            ;;
    esac
}

# Entry point of the script
main "$@"

