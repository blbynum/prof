#!/usr/bin/env bash

################################################################################
# prof - CLI tool for managing bash profiles
#
# Purpose:
#   prof is a command-line tool designed to organize and manage bash profiles,
#   providing users with a convenient way to create, edit, delete, list, export,
#   and import profiles. It helps users organize their .bash_profile contents by
#   creating separate profiles with customizable settings, aliases, functions,
#   and more. The tool offers features such as dependency management by load
#   order prioritization for seamless profile loading.
#
# Author:
#   Ben Bynum
#
# Version:
#   1.1.0
#   06/04/2023
#
# Repository:
#   https://github.com/blbynum/prof
#
# License:
#   MIT License
#
#   Copyright (c) 2023 Ben Bynum
#
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#   of this software and associated documentation files (the "Software"), to deal
#   in the Software without restriction, including without limitation the rights
#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#   copies of the Software, and to permit persons to whom the Software is
#   furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#
################################################################################


profile_template=$(cat << EOF
#!/usr/bin/env bash

# Profile: {profile_name}
# Description: Brief description of the profile

# ===============================================
# Environment variables
# ===============================================
# export VARNAME=value

# ===============================================
# Path modifications
# ===============================================
# export PATH=\$PATH:/new/path

# ===============================================
# Functions
# ===============================================
# functionname() {
#    command
# }

# ===============================================
# Aliases
# ===============================================
# alias aliasname='command'

# ===============================================
# Prompt modifications
# ===============================================
# PS1='Your custom prompt here'

# ===============================================
# Profile specific settings/commands
# ===============================================
# Add any profile-specific settings or commands here

# ===============================================
# Other
# ===============================================
# Add anything else here

# End of profile: {profile_name}

# Print a message indicating that the profile has been loaded
echo "Profile {profile_name} loaded."

EOF
)


function create_profile {
    if [ -z "$1" ]; then
        echo "Error: No profile name provided."
        echo "Usage: prof create <profile_name> <load_order>"
        return 1
    fi

    if [ -z "$2" ]; then
        echo "Error: No load order provided."
        echo "Usage: prof create <profile_name> <load_order>"
        return 1
    fi

    if ! [[ "$2" =~ ^[0-9]+$ ]]; then
        echo "Error: Load order must be a positive integer."
        return 1
    fi

    if ! [[ "$1" =~ ^[A-Za-z0-9_-]+$ ]]; then
        echo "Error: Profile name can only contain letters, numbers, underscores, and hyphens."
        return 1
    fi

    local profile_name=$1
    local load_order=$2

    # Ensure the ~/.bash_profiles directory exists
    mkdir -p ~/.bash_profiles

    # Ensure the profile metadata file exists
    touch ~/.bash_profiles/.profile_metadata

    # Determine the user's preferred editor
    local editor=${EDITOR:-vi}  # Default to vi if no editor is set

    # Format the load order with leading zeros
    printf -v formatted_load_order "%02d" "$load_order"

    # Check if profile already exists
    if grep -qw "$profile_name" ~/.bash_profiles/.profile_metadata; then
        echo "Profile $profile_name already exists."
        return
    fi

    # Add the profile to the metadata file
    echo "$formatted_load_order $profile_name" >> ~/.bash_profiles/.profile_metadata

    # Sort the metadata file by load order
    sort ~/.bash_profiles/.profile_metadata -o ~/.bash_profiles/.profile_metadata

    # Create the profile file with the template content
    echo "${profile_template//\{profile_name\}/$profile_name}" > ~/.bash_profiles/$profile_name

    # Open the new profile in the editor
    $editor ~/.bash_profiles/$profile_name
}


function edit_profile {
    if [ -z "$1" ]; then
        echo "Error: No profile name provided."
        echo "Usage: prof edit <profile_name>"
        return 1
    fi

    local profile_name=$1

    # Determine the user's preferred editor
    local editor=${EDITOR:-vi}  # Default to vi if no editor is set

    # Check if the profile exists
    if grep -qw "$profile_name" ~/.bash_profiles/.profile_metadata; then
        # Open the profile in the editor
        $editor ~/.bash_profiles/$profile_name
    else
        echo "Error: Profile $profile_name does not exist."
        return 1
    fi
}

function delete_profile {
    if [ -z "$1" ]; then
        echo "Error: No profile name provided."
        echo "Usage: prof delete <profile_name>"
        return 1
    fi

    local profile_name=$1

    # Check if the profile exists
    if grep -qw "$profile_name" ~/.bash_profiles/.profile_metadata; then
        # Prompt for confirmation
        read -p "Are you sure you want to delete the profile '$profile_name'? This action cannot be undone. (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            # Delete the profile file
            rm ~/.bash_profiles/$profile_name
            # Remove the profile from the metadata file
            sed -i '' "/$profile_name/d" ~/.bash_profiles/.profile_metadata
            echo "Profile '$profile_name' deleted."
        else
            echo "Deletion canceled."
        fi
    else
        echo "Error: Profile '$profile_name' does not exist."
        return 1
    fi
}


function list_profiles {
    # Check if the metadata file exists
    if [ ! -f ~/.bash_profiles/.profile_metadata ]; then
        echo "No profiles found."
        return 1
    fi

    echo "Profiles:"
    echo "---------"

    # Read the metadata file line by line
    while IFS= read -r line; do
        local load_order=$(echo "$line" | awk '{print $1}')
        local profile_name=$(echo "$line" | awk '{print $2}')
        echo "[$load_order] $profile_name"
    done < ~/.bash_profiles/.profile_metadata
}

function export_profile {
    local profile_name=$1
    local export_directory=$2

    if [ -z "$profile_name" ]; then
        echo "Error: No profile name provided."
        echo "Usage: prof export <profile_name> <export_directory>"
        return 1
    fi

    if [ -z "$export_directory" ]; then
        echo "Error: No export directory provided."
        echo "Usage: prof export <profile_name> <export_directory>"
        return 1
    fi

    # Check if the profile exists
    if grep -qw "$profile_name" ~/.bash_profiles/.profile_metadata; then
        # Create the export directory if it doesn't exist
        mkdir -p "$export_directory"

        # Copy the profile file to the export directory
        cp ~/.bash_profiles/$profile_name "$export_directory/$profile_name"

        echo "Profile '$profile_name' exported to $export_directory."
    else
        echo "Error: Profile '$profile_name' does not exist."
        return 1
    fi
}

function import_profile {
    local profile_file=$1
    local load_order=$2

    if [ -z "$profile_file" ]; then
        echo "Error: No profile file provided."
        echo "Usage: prof import <profile_file> <load_order>"
        return 1
    fi

    if [ -z "$load_order" ]; then
        echo "Error: No load order provided."
        echo "Usage: prof import <profile_file> <load_order>"
        return 1
    fi

    if ! [[ "$load_order" =~ ^[0-9]+$ ]]; then
        echo "Error: Load order must be a positive integer."
        return 1
    fi

    if [ ! -f "$profile_file" ]; then
        echo "Error: Profile file '$profile_file' does not exist."
        return 1
    fi

    local profile_name=$(basename "$profile_file")

    # Format the load order with leading zeros
    printf -v formatted_load_order "%02d" "$load_order"

    # Check if the profile already exists
    if grep -qw "$profile_name" ~/.bash_profiles/.profile_metadata; then
        echo "Profile '$profile_name' already exists. Skipping import."
    else
        # Copy the profile file to the ~/.bash_profiles directory
        cp "$profile_file" ~/.bash_profiles/
        # Add the profile to the metadata file with the provided load order
        echo "$formatted_load_order $profile_name" >> ~/.bash_profiles/.profile_metadata
        echo "Profile '$profile_name' imported with load order $formatted_load_order."
    fi
}


function install_prof {
    local target_file=${1:-~/.bash_profile}

    # Check if the target file exists
    if [ ! -f "$target_file" ]; then
        echo "Error: Target file '$target_file' does not exist."
        echo "You can specify a different file by providing an argument, e.g., prof install .zshrc"
        return 1
    fi

    # Check if the code already exists in the target file
    if grep -q "# Load all profiles in the ~/.bash_profiles directory" "$target_file"; then
        echo "The code to load profiles is already present in '$target_file'."
    else
        # Add the code to load profiles to the target file
        cat << EOF >> "$target_file"

# Load all profiles in the ~/.bash_profiles directory
for profile in ~/.bash_profiles/*; do
    if [ -f "\$profile" ]; then
        source "\$profile"
    fi
done

EOF

        # Display instructions for adding prof to PATH
        cat << EOF

A loop has been added to $target_file to load all profiles in the ~/.bash_profiles directory.

To use the 'prof' command, you have two options:

Option 1: Add the location of the 'prof' executable to your PATH manually.
You can do this by adding the following line to your target file (e.g., ~/.bash_profile):
export PATH=\$PATH:/path/to/prof
Make sure to replace '/path/to/prof' with the actual path where the 'prof' executable is located.

Option 2: Copy the 'prof' executable to a directory that is already in your PATH.
For example, you can copy 'prof' to /usr/local/bin, which is commonly in the default PATH on many systems.
To do this, run the following command:
cp prof /usr/local/bin
After copying, you can use 'prof' from any location.

EOF
    fi
}

function display_help {
    cat <<EOF
prof - CLI tool for managing bash profiles

Usage: prof <command> [arguments]

Commands:
  create <profile_name> <load_order>  Create a new profile
  edit <profile_name>                 Edit an existing profile
  delete <profile_name>               Delete an existing profile
  list                                List all profiles
  export <profile_name> <export_directory>  Export a profile to an export directory
  import <profile_file> <load_order>  Import a profile with a specific load order
  install [<target_file>]             Install the profile loader line in the target file
                                       (default: ~/.bash_profile)

  help                                Display this help message

Note: The 'install' command installs the line to load profiles in the target file,
      such as ~/.bash_profile. You can specify a different file by providing
      an optional argument, e.g., prof install .zshrc.
EOF
}

function main {
    case "$1" in
        create)
            create_profile "$2" "$3"
            ;;
        edit)
            edit_profile "$2"
            ;;
        delete)
            delete_profile "$2"
            ;;
        list)
            list_profiles
            ;;
        export)
            export_profile "$2" "$3"
            ;;
        import)
            import_profile "$2" "$3"
            ;;
        install)
            install_prof "$2"
            ;;
        help)
            display_help
            ;;
        *)
            echo "Invalid command: $1"
            display_help
            ;;
    esac
}

# Entry point of the script
main "$@"

